{"version":3,"sources":["components/card-lists/card/card.component.jsx","components/card-lists/CardList.jsx","components/card-lists/SearchBox/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mUAWeA,G,kBATM,SAAAC,GAAK,OACzB,yBAAKC,UAAU,kBACZ,yBAAKC,IAAI,UACTC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACH,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCIPC,EAPS,SAAAR,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCQzBQ,G,MAZU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAEjB,6BACA,2BAAOb,UAAU,SACTc,KAAK,SACLF,YAAaA,EACbG,SAAUF,OC0CXG,E,kDA3Cb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACLT,SAAW,GACXU,YAAa,IAJV,E,gEAQM,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,+BAGhC,IAAD,SAC0BE,KAAKR,MAA9BT,EADD,EACCA,SAAUU,EADX,EACWA,YACXQ,EAAmBlB,EAASmB,QAAO,SAAAxB,GAAO,OAC9CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAClD,OACE,yBAAK5B,UAAU,OAEb,gDAEC,kBAAC,EAAD,CACDY,YAAY,kBACZC,aAAe,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAEzD,kBAAC,EAAD,CAAUxB,SAAUkB,S,GA5BVO,IAAMC,WCKlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTtB,MAAK,SAAA2B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf2B,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDWnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,oBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,oBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtCxB,MAAMuB,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BjD,MAAK,SAAAC,GAEJ,IAAMiD,EAAcjD,EAASgD,QAAQE,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMtD,MAAK,SAAA2B,GACjCA,EAAa4B,aAAavD,MAAK,WAC7BiB,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMtD,MAAK,WACjCiC,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.0f3ddd73.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n export const Card = props => ( \r\n <div className=\"card-container\" >\r\n    <img alt=\"monster\"\r\n    src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n </div>\r\n )\r\n\r\nexport default Card","import React from 'react';\r\nimport './card-list.css'\r\nimport Card from './card/card.component'\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster => \r\n        <Card key={monster.id} monster={monster}/>\r\n        )}\r\n    </div>\r\n)\r\nexport default CardList","import React from 'react'\r\nimport './searchbox.style.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange }) => (\r\n    \r\n        <div>\r\n        <input className=\"search\"\r\n                type=\"search\"\r\n                placeholder={placeholder}\r\n                onChange={handleChange}\r\n          />\r\n          </div>\r\n    )\r\n\r\n\r\nexport default SearchBox","import React from 'react';\nimport './App.css';\nimport CardList from './components/card-lists/CardList'\nimport SearchBox from './components/card-lists/SearchBox/searchbox.component'\n\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n            monsters : [],\n            searchField: \"\"\n    }\n   \n }\n componentDidMount(){\n   fetch(\"https://jsonplaceholder.typicode.com/users\")\n   .then(response => response.json())\n   .then(users => this.setState({monsters: users}) )\n }  \n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return(\n      <div className=\"App\">\n        \n        <h1>Monsters Rolodex</h1>\n        \n         <SearchBox \n        placeholder=\"search monsters\"\n        handleChange={ e => this.setState({searchField: e.target.value})}\n        />\n        <CardList monsters={filteredMonsters} />\n       \n      </div>\n    )\n  }\n}\n\n\n\n\n\n\n\n\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}